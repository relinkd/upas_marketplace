(function() {var type_impls = {
"indexer":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Memory-for-VirtualMemory%3CM%3E\" class=\"impl\"><a href=\"#impl-Memory-for-VirtualMemory%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; Memory for VirtualMemory&lt;M&gt;<div class=\"where\">where\n    M: Memory,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.size\" class=\"method trait-impl\"><a href=\"#method.size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></summary><div class='docblock'>Returns the current size of the stable memory in WebAssembly\npages. (One WebAssembly page is 64Ki bytes.)</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.grow\" class=\"method trait-impl\"><a href=\"#method.grow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">grow</a>(&amp;self, pages: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Tries to grow the memory by new_pages many pages containing\nzeroes.  If successful, returns the previous size of the\nmemory (in pages).  Otherwise, returns -1.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read</a>(&amp;self, offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Copies the data referred to by offset out of the stable memory\nand replaces the corresponding bytes in dst.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write</a>(&amp;self, offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, src: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Copies the data referred to by src and replaces the\ncorresponding segment starting at offset in the stable memory.</div></details></div></details>","Memory","indexer::storable::Memory"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-VirtualMemory%3CM%3E\" class=\"impl\"><a href=\"#impl-Clone-for-VirtualMemory%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for VirtualMemory&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + Memory,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; VirtualMemory&lt;M&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","indexer::storable::Memory"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()